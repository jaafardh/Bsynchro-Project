using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Bsynchro.InfraStructure.Migrations
{
    /// <inheritdoc />
    public partial class Migration4 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("BEGIN TRANSACTION\r\nSET QUOTED_IDENTIFIER ON\r\nSET ARITHABORT ON\r\nSET NUMERIC_ROUNDABORT OFF\r\nSET CONCAT_NULL_YIELDS_NULL ON\r\nSET ANSI_NULLS ON\r\nSET ANSI_PADDING ON\r\nSET ANSI_WARNINGS ON\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.Account\r\n\tDROP CONSTRAINT FK_Account_Customer\r\nGO\r\nALTER TABLE dbo.Customer SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nCREATE TABLE dbo.Tmp_Account\r\n\t(\r\n\tAccountID int NOT NULL IDENTITY (1, 1),\r\n\tBalance float(53) NULL,\r\n\tCustomerID int NOT NULL\r\n\t)  ON [PRIMARY]\r\nGO\r\nALTER TABLE dbo.Tmp_Account SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Account ON\r\nGO\r\nIF EXISTS(SELECT * FROM dbo.Account)\r\n\t EXEC('INSERT INTO dbo.Tmp_Account (AccountID, Balance, CustomerID)\r\n\t\tSELECT AccountID, Balance, CustomerID FROM dbo.Account WITH (HOLDLOCK TABLOCKX)')\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Account OFF\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account1\r\nGO\r\nDROP TABLE dbo.Account\r\nGO\r\nEXECUTE sp_rename N'dbo.Tmp_Account', N'Account', 'OBJECT' \r\nGO\r\nALTER TABLE dbo.Account ADD CONSTRAINT\r\n\tPK_Account PRIMARY KEY CLUSTERED \r\n\t(\r\n\tAccountID\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\r\nGO\r\nCREATE NONCLUSTERED INDEX IX_Account_CustomerID ON dbo.Account\r\n\t(\r\n\tCustomerID\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\nGO\r\nALTER TABLE dbo.Account ADD CONSTRAINT\r\n\tFK_Account_Customer FOREIGN KEY\r\n\t(\r\n\tCustomerID\r\n\t) REFERENCES dbo.Customer\r\n\t(\r\n\tCustomerID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account FOREIGN KEY\r\n\t(\r\n\tSenderId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account1 FOREIGN KEY\r\n\t(\r\n\tRecipientId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.[Transaction] SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\n"
                + "BEGIN TRANSACTION\r\nSET QUOTED_IDENTIFIER ON\r\nSET ARITHABORT ON\r\nSET NUMERIC_ROUNDABORT OFF\r\nSET CONCAT_NULL_YIELDS_NULL ON\r\nSET ANSI_NULLS ON\r\nSET ANSI_PADDING ON\r\nSET ANSI_WARNINGS ON\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nCREATE TABLE dbo.Tmp_Customer\r\n\t(\r\n\tCustomerID int NOT NULL IDENTITY (1, 1),\r\n\tBalance float(53) NULL,\r\n\tName nvarchar(50) NULL,\r\n\tSurname nvarchar(50) NULL\r\n\t)  ON [PRIMARY]\r\nGO\r\nALTER TABLE dbo.Tmp_Customer SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Customer ON\r\nGO\r\nIF EXISTS(SELECT * FROM dbo.Customer)\r\n\t EXEC('INSERT INTO dbo.Tmp_Customer (CustomerID, Balance, Name, Surname)\r\n\t\tSELECT CustomerID, Balance, Name, Surname FROM dbo.Customer WITH (HOLDLOCK TABLOCKX)')\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Customer OFF\r\nGO\r\nALTER TABLE dbo.Account\r\n\tDROP CONSTRAINT FK_Account_Customer\r\nGO\r\nDROP TABLE dbo.Customer\r\nGO\r\nEXECUTE sp_rename N'dbo.Tmp_Customer', N'Customer', 'OBJECT' \r\nGO\r\nALTER TABLE dbo.Customer ADD CONSTRAINT\r\n\tPK_Customer PRIMARY KEY CLUSTERED \r\n\t(\r\n\tCustomerID\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account1\r\nGO\r\nALTER TABLE dbo.Account ADD CONSTRAINT\r\n\tFK_Account_Customer FOREIGN KEY\r\n\t(\r\n\tCustomerID\r\n\t) REFERENCES dbo.Customer\r\n\t(\r\n\tCustomerID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.Account SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account FOREIGN KEY\r\n\t(\r\n\tSenderId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account1 FOREIGN KEY\r\n\t(\r\n\tRecipientId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.[Transaction] SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\n"
                + "BEGIN TRANSACTION\r\nSET QUOTED_IDENTIFIER ON\r\nSET ARITHABORT ON\r\nSET NUMERIC_ROUNDABORT OFF\r\nSET CONCAT_NULL_YIELDS_NULL ON\r\nSET ANSI_NULLS ON\r\nSET ANSI_PADDING ON\r\nSET ANSI_WARNINGS ON\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.Account\r\n\tDROP CONSTRAINT FK_Account_Customer\r\nGO\r\nALTER TABLE dbo.Customer SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account\r\nGO\r\nALTER TABLE dbo.[Transaction]\r\n\tDROP CONSTRAINT FK_Transaction_Account1\r\nGO\r\nALTER TABLE dbo.Account ADD CONSTRAINT\r\n\tFK_Account_Customer FOREIGN KEY\r\n\t(\r\n\tCustomerID\r\n\t) REFERENCES dbo.Customer\r\n\t(\r\n\tCustomerID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.Account SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nCOMMIT\r\nBEGIN TRANSACTION\r\nGO\r\nCREATE TABLE dbo.Tmp_Transaction\r\n\t(\r\n\tTransactionID int NOT NULL IDENTITY (1, 1),\r\n\tTransactionDate datetime NULL,\r\n\tSenderId int NOT NULL,\r\n\tRecipientId int NOT NULL,\r\n\tAmount float(53) NULL\r\n\t)  ON [PRIMARY]\r\nGO\r\nALTER TABLE dbo.Tmp_Transaction SET (LOCK_ESCALATION = TABLE)\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Transaction ON\r\nGO\r\nIF EXISTS(SELECT * FROM dbo.[Transaction])\r\n\t EXEC('INSERT INTO dbo.Tmp_Transaction (TransactionID, TransactionDate, SenderId, RecipientId, Amount)\r\n\t\tSELECT TransactionID, TransactionDate, SenderId, RecipientId, Amount FROM dbo.[Transaction] WITH (HOLDLOCK TABLOCKX)')\r\nGO\r\nSET IDENTITY_INSERT dbo.Tmp_Transaction OFF\r\nGO\r\nDROP TABLE dbo.[Transaction]\r\nGO\r\nEXECUTE sp_rename N'dbo.Tmp_Transaction', N'Transaction', 'OBJECT' \r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tPK_Transaction PRIMARY KEY CLUSTERED \r\n\t(\r\n\tTransactionID\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\n\r\nGO\r\nCREATE NONCLUSTERED INDEX IX_Transaction_RecipientId ON dbo.[Transaction]\r\n\t(\r\n\tRecipientId\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\nGO\r\nCREATE NONCLUSTERED INDEX IX_Transaction_SenderId ON dbo.[Transaction]\r\n\t(\r\n\tSenderId\r\n\t) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account FOREIGN KEY\r\n\t(\r\n\tSenderId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nALTER TABLE dbo.[Transaction] ADD CONSTRAINT\r\n\tFK_Transaction_Account1 FOREIGN KEY\r\n\t(\r\n\tRecipientId\r\n\t) REFERENCES dbo.Account\r\n\t(\r\n\tAccountID\r\n\t) ON UPDATE  NO ACTION \r\n\t ON DELETE  NO ACTION \r\n\t\r\nGO\r\nCOMMIT\r\n"
                );
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}
